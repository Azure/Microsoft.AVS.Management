trigger:
- main

pr:
- none
########################################
variables:
- template: vars.yml

name: $(Rev:r) # Provide build run number (i.e., Build.BuildNumber) that is used as patch for build version and ultimately module version
#######################################

stages:
- stage: Official_Build 
  displayName: Build and Publish Package
  pool:
    vmImage: windows-2019
  jobs:
  # Build
  #########################################################################################
  - job: Build
    displayName: Build Official AVS-Automation-AdminTools
    steps:
    - task: PowerShell@2
      displayName: Set Build Version
      inputs:
        filePath: '.build-tools/setBuildVersion.ps1'
        arguments: '$(System.DefaultWorkingDirectory)/${{ variables.moduleFolderName }}/${{ variables.moduleFolderName }}.psd1 $(Build.BuildNumber)'
        pwsh: true
    - task: PowerShell@2
      displayName: Restore Dependencies
      inputs:
        filePath: '.build-tools/getRequiredModules.ps1'
        arguments: '${{ variables.moduleFolderName }}/${{ variables.moduleFolderName }}.psd1'
        pwsh: true
    - task: PowerShell@2
      displayName: Versioning Module
      inputs:
        filePath: '.build-tools/updateModuleVersion.ps1'
        arguments: '$(System.DefaultWorkingDirectory)\${{ variables.moduleFolderName }}\${{ variables.moduleFolderName }}.psd1'
        pwsh: true
    - task: PowerShell@2
      displayName: Pre-Validate Module and Scripts #PSGallery publishing guidelines: https://docs.microsoft.com/en-us/powershell/scripting/gallery/how-to/publishing-packages/publishing-a-package?view=powershell-7.1#pre-validate-your-item
      inputs:
        filePath: 'tests/prevalidateModules.ps1'
        arguments: '${{ variables.moduleFolderName }}'
        pwsh: true
    - publish: $(System.DefaultWorkingDirectory)/${{ variables.moduleFolderName }}
      artifact: ${{ variables.stageForSigningFolder }}
      displayName: Stage Files for Signing
    - publish: $(System.DefaultWorkingDirectory)
      artifact: ${{ variables.stageForUnsignedFolder }}
      displayName: Stage Unsigned Module
  # Sign and Publish
  ################################################################################################
  - job: Release
    displayName: Sign and Publish
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        source: 'current'
        artifact: '${{ variables.stageForSigningFolder }}'
        path: '$(Build.ArtifactStagingDirectory)/${{ variables.moduleFolderName }}'
    - task: DownloadPipelineArtifact@2
      inputs:
        source: 'current'
        artifact: '${{ variables.stageForUnsignedFolder }}'
        path: '$(Build.ArtifactStagingDirectory)/${{ variables.stageForUnsignedFolder }}'
    - task: PowerShell@2
      displayName: Restore Dependencies
      inputs:
        filePath: '.build-tools/getRequiredModules.ps1'
        arguments: '${{ variables.moduleFolderName }}/${{ variables.moduleFolderName }}.psd1'
        pwsh: true
    - task: NuGetAuthenticate@0
      inputs:
        nuGetServiceConnections: Unofficial-AVS-Automation-AdminTools
    - pwsh: |
        Remove-Item "$(Build.ArtifactStagingDirectory)/${{ variables.moduleFolderName }}/CodeSignSummary*"
      displayName: Remove CodeSign Summary before packaging
    - publish: $(Build.ArtifactStagingDirectory)/${{ variables.moduleFolderName }}
      displayName: Publish Signed Files To Artifact Directory
      artifact: '${{ variables.moduleFolderName }}'
    - task: PowerShell@2
      displayName: Publish version dependencies to Official feed
      env: 
        UNOFFICIAL_FEED_NUGET_APIKEY: $(unofficialFeedNugetApiKey)
      inputs:
        filePath: '.build-tools/findAndPublishDependencies.ps1'
        arguments: '$(Build.ArtifactStagingDirectory)/${{ variables.stageForUnsignedFolder }}/${{ variables.moduleFolderName }}/${{ variables.moduleFolderName }}.psd1'
        pwsh: true
    - task: PowerShell@2
      displayName: Publish Preview Version to Official Feed
      env:
        UNOFFICIAL_FEED_NUGET_APIKEY: $(unofficialFeedNugetApiKey)
        # MICROSOFT_AVS_MANAGEMENT_OFFICIAL_FEED_AND_RELEASES_PAT: $(Microsoft-AVS-Management-OfficialFeed-And-ReleasesPAT)
      inputs:
        filePath: '.build-tools/publishPreviewVersionToUnofficialFeed.ps1'
        arguments: '$(Build.ArtifactStagingDirectory)/${{ variables.stageForUnsignedFolder }}/${{ variables.moduleFolderName }}/${{ variables.moduleFolderName }}.psd1'
        pwsh: true
