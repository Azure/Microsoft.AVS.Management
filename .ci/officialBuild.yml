trigger:
- none

pr:
- none
########################################
variables:
  MAJOR: 1
  minor: 0
  moduleFolderName: 'Azure.AVSPowerCLI'
  outputFolderName: 'signed'
  GDN_CODESIGN_TARGETDIRECTORY: '$(Build.ArtifactStagingDirectory)/${{ variables.outputFolderName }}'

#Versioning
name: $(MAJOR).$(minor).$(Rev:r)
#######################################

stages:
- stage: Official_Build 
  displayName: Build and Publish Package
  pool:
    vmImage: windows-2019
  jobs:
  - job: Build
    displayName: Build Official AVS-Automation-AdminTools
    steps:
    - task: PowerShell@2
      displayName: Restore Dependencies
      inputs:
        filePath: '.build-tools/getRequiredModules.ps1'
        arguments: 'powercli/${{ variables.moduleFolderName }}/${{ variables.moduleFolderName }}.psd1'
        pwsh: true
    - task: PowerShell@2
      displayName: Versioning Module
      inputs:
        filePath: '.build-tools/updateModuleVersion.ps1'
        arguments: 'powercli/${{ variables.moduleFolderName }}/${{ variables.moduleFolderName }}.psd1'
        pwsh: true
    - task: PowerShell@2
      displayName: Pre-Validate Module and Scripts #PSGallery publishing guidelines: https://docs.microsoft.com/en-us/powershell/scripting/gallery/how-to/publishing-packages/publishing-a-package?view=powershell-7.1#pre-validate-your-item
      inputs:
        filePath: 'tests/prevalidateModules.ps1'
        arguments: 'powercli/${{ variables.moduleFolderName }}'
        pwsh: true
    - task: PowerShell@2
      displayName: Copy files to Staging Directory 
      inputs:
        filePath: '.build-tools/copyModuleItems.ps1'
        arguments: '$(System.DefaultWorkingDirectory)/powercli $(Build.ArtifactStagingDirectory)/${{ variables.outputFolderName }}'
        pwsh: true
    - publish: $(System.DefaultWorkingDirectory)/powercli
      artifact: ${{ variables.moduleFolderName }}
      displayName: Copy Artifact for Next Job
  - job: Check_Compliance
    displayName: Compliance Tasks
    dependsOn: 
    - Build
    condition: succeeded('Build')
    steps:
    - task: ComponentGovernanceComponentDetection@0
      displayName: 'Component Detection'
      inputs:
        sourceScanPath: '$(Build.SourcesDirectory)'
        snapshotForceEnabled: true
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
      displayName: 'Run CredScan'
      inputs:
        toolMajorVersion: V2
        debugMode: false
      continueOnError: false
    - task: PoliCheck@1
      displayName: 'Run PoliCheck'
      inputs:
        targetType: F
        optionsFC: 0
        optionsXS: 0
        optionsPE: '1|2|3|4'
        optionsHMENABLE: 0
    #      optionsRulesDBPath: '$(Build.SourcesDirectory)\tools\terms\PowerShell-Terms-Rules.mdb'
    #      optionsFTPATH: '$(Build.SourcesDirectory)\tools\terms\FileTypeSet.xml'
        toolVersion: 5.8.2.1
      continueOnError: false
    - task: PublishSecurityAnalysisLogs@2
      displayName: 'Publish Security Analysis Logs to Build Artifacts'
      continueOnError: false
    - task: SdtReport@1
      inputs:
        AllTools: false
        APIScan: false
        BinSkim: false
        CodesignValidation: false
        CredScan: true
        FortifySCA: false
        FxCop: false
        ModernCop: false
        MSRD: false
        PoliCheck: true
        PoliCheckBreakOn: 'Severity2Above'
        RoslynAnalyzers: false
        SDLNativeRules: false
        Semmle: false
        TSLint: false
        ToolLogsNotFoundAction: 'Standard'
  - job: Release
    displayName: Sign and Publish
    dependsOn: 
    - Check_Compliance
    condition: succeeded('Check_Compliance')
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        source: 'current'
        artifact: '${{ variables.moduleFolderName }}'
        path: '$(Build.ArtifactStagingDirectory)/${{ variables.outputFolderName }}'
    - task: EsrpCodeSigning@1
      inputs:
        ConnectedServiceName: 'AVS-Automation-AdminTools-OfficialBuild'
        FolderPath: '$(Build.ArtifactStagingDirectory)/${{ variables.outputFolderName }}/${{ variables.moduleFolderName }}'
        Pattern: '${{ variables.moduleFolderName }}.psd1,${{ variables.moduleFolderName }}.psm1'
        UseMinimatch: false
        signConfigType: 'inlineSignParams'
        inlineOperation: |
          [
            {
              "keyCode": "CP-230012",
              "operationSetCode": "SigntoolSign",
              "parameters": [
                {
                  "parameterName": "OpusName",
                  "parameterValue": "AVS-Automation-AdminTools"
                },
                {
                  "parameterName": "OpusInfo",
                  "parameterValue": "https://github.com/Azure/azure-avs-automation-admintools"
                },
                {
                  "parameterName": "PageHash",
                  "parameterValue": "/NPH"
                },
                {
                  "parameterName": "FileDigest",
                  "parameterValue": "/fd sha256"
                },
                {
                  "parameterName": "TimeStamp",
                  "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                }
              ],
              "toolName": "signtool.exe",
              "toolVersion": "6.2.9304.0"
            }
          ]
        SessionTimeout: '60'
        MaxConcurrency: '50'
        MaxRetryAttempts: '5'
    - task: PowerShell@2
      displayName: Restore Dependencies
      inputs:
        filePath: '.build-tools/getRequiredModules.ps1'
        arguments: 'powercli/${{ variables.moduleFolderName }}/${{ variables.moduleFolderName }}.psd1'
        pwsh: true
    - task: NuGetAuthenticate@0
      inputs:
        nuGetServiceConnections: Unofficial-AVS-Automation-AdminTools
    - task: PowerShell@2
      displayName: Package Module
      inputs:
        filePath: 'package/packageModule.ps1'
        arguments: '$(Build.ArtifactStagingDirectory)/${{ variables.outputFolderName }}/${{ variables.moduleFolderName }} official'
        pwsh: true
    - publish: $(Build.ArtifactStagingDirectory)/${{ variables.outputFolderName }}
      artifact: 'signed'
      displayName: Publish Signed Artifact for Next Job
# - stage: Test
#   displayName: Test
#   dependsOn: Compliance
#   jobs:
#   - job: Run_Tests
#     steps:
#     - pwsh: |
#         Write-Output "---- NO TEST RUNNING----"
# - stage: Release
#   displayName: Release
#   dependsOn: 
#   - Test
#   condition: succeeded('Test')
#   jobs:
#   - job: Release
#     steps:
#     - pwsh: |
#         Write-Output "---- NO RELEASE TASKS----"