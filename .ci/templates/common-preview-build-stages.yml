parameters:
- name: moduleFolderName
  type: string
- name: moduleDisplayName
  type: string

stages:
- stage: 'Build_${{ parameters.moduleDisplayName }}' # Valid stage name cannot contain the character '.'
  displayName: 'Build ${{ parameters.moduleFolderName }}'
  dependsOn: [Compliance_Checks]
  pool:
    os: linux
    image: avs-management-ubuntu-22.04-1es-image
    name: avs-management-1es-hosted-pool
  jobs:
  - job: 'Build'
    displayName: 'Preview build for ${{ parameters.moduleFolderName }}'
    steps:
    - task: NuGetAuthenticate@1

    - task: AzureCLI@2
      inputs:
        azureSubscription: Scripting Metadata
        scriptLocation: 'inlineScript'
        scriptType: 'pscore'
        inlineScript: |
          $accessToken = az account get-access-token --query accessToken --resource 499b84ac-1321-427f-aa17-267ca6975798 -o tsv
          Write-Host "##vso[task.setsecret]$accessToken"
          $endpointsJson=@{endpointCredentials=@(@{endpoint="$(consumptionFeedUrl)/nuget/v2"; password="$accessToken"}
                                                 @{endpoint="$(consumptionFeedUrl)/nuget/v3/index.json"; password="$accessToken"}
                                                 @{endpoint="$(previewFeedUrl)/nuget/v2"; password="$accessToken"}
                                                 @{endpoint="$(previewFeedUrl)/nuget/v3/index.json"; password="$accessToken"})} | ConvertTo-Json -Compress
          Write-Host "##vso[task.setvariable variable=accessToken;issecret=true]$accessToken"
          Write-Host "##vso[task.setvariable variable=endpointsJson;issecret=true]$endpointsJson"
      displayName: Login to Azure

    - task: AzureCLI@2
      inputs:
        azureSubscription: Scripting Metadata
        scriptLocation: 'inlineScript'
        scriptType: 'pscore'
        inlineScript: |
          az artifacts universal download `
            --organization $(consumptionAuthority) `
            --project=$(consumptionProject) `
            --scope project `
            --feed $(consumptionFeed) `
            --name shuttle `
            --version $(shuttleVersion) `
            --path shuttle          
      displayName: Prepare shuttle
      env:
        AZURE_DEVOPS_EXT_PAT: $(accessToken)

    - pwsh: |
        .build-tools/registerSources.ps1 $(consumptionFeedUrl) $(previewFeed)
        .build-tools/getRequiredModules.ps1 '$(accessToken)' '${{ parameters.moduleFolderName }}/${{ parameters.moduleFolderName }}.psd1'
      displayName: 'Restore Dependencies for ${{ parameters.moduleFolderName }}'
      env:
        VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: $(endpointsJson)
        NUGET_PLUGIN_PATHS: $(NUGET_PLUGIN_PATHS)

    - task: PowerShell@2
      displayName: 'Pre-Validate Module and Scripts for ${{ parameters.moduleFolderName }}'
      inputs:
        filePath: tests/prevalidateModules.ps1
        arguments: "${{ parameters.moduleFolderName }}"
        pwsh: true

    - task: PowerShell@2
      inputs:
        filePath: .build-tools/publish.ps1 
        arguments: >
          "$(accessToken)"
          "$(System.DefaultWorkingDirectory)/${{ parameters.moduleFolderName }}/${{ parameters.moduleFolderName }}.psd1"
          "$(Build.BuildNumber)"
          "$(previewFeed)"
          dev 
      displayName: Publish Developer Version
      env:
        VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: $(endpointsJson)
        NUGET_PLUGIN_PATHS: $(NUGET_PLUGIN_PATHS)

    - task: PowerShell@2
      inputs:
        filePath: .build-tools/publish.ps1 
        arguments: >
          "$(accessToken)"
          '$(System.DefaultWorkingDirectory)/${{ parameters.moduleFolderName }}/${{ parameters.moduleFolderName }}.psd1'
          "$(Build.BuildNumber)"
          "$(previewFeed)"
          preview
      displayName: Publish Preview Version
      env:
        VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: $(endpointsJson)
        NUGET_PLUGIN_PATHS: $(NUGET_PLUGIN_PATHS)

    - pwsh: |
        echo "+ ${{ parameters.moduleFolderName }}@$(moduleVersion)-dev" > shuttle/baseline
        dotnet shuttle/Shuttle.dll generate
      env:
        VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: $(endpointsJson)
        NUGET_PLUGIN_PATHS: $(NUGET_PLUGIN_PATHS)
        METADATA: $(metadataAuthority)/$(metadataProject)/_artifacts/feed/$(metadataFeed)
      displayName: 'Generate metadata'
