trigger:
- main

pr:
- none
########################################
variables:
- template: vars.yml

name: $(Rev:r) # Provide build run number (i.e., Build.BuildNumber) that is used as patch for build version and ultimately module version
#######################################

stages:
- stage: Run pre-validation
  displayName: Pre-validation of module directory
  pool:
    vmImage: windows-2019
  jobs:
  # Validation
  #########################################################################################
  - job: Validation
    displayName: Validate Official AVS-Automation-AdminTools
    steps:
    - task: PowerShell@2
      displayName: Set Build Version
      inputs:
        filePath: '.build-tools/setBuildVersion.ps1'
        arguments: '$(System.DefaultWorkingDirectory)/${{ variables.moduleFolderName }}/${{ variables.moduleFolderName }}.psd1 $(Build.BuildNumber)'
        pwsh: true
    - task: PowerShell@2
      displayName: Restore Dependencies
      inputs:
        filePath: '.build-tools/getRequiredModules.ps1'
        arguments: '${{ variables.moduleFolderName }}/${{ variables.moduleFolderName }}.psd1'
        pwsh: true
    - task: PowerShell@2
      displayName: Versioning Module
      inputs:
        filePath: '.build-tools/updateModuleVersion.ps1'
        arguments: '$(System.DefaultWorkingDirectory)\${{ variables.moduleFolderName }}\${{ variables.moduleFolderName }}.psd1'
        pwsh: true
    - task: PowerShell@2
      displayName: Pre-Validate Module and Scripts #PSGallery publishing guidelines: https://docs.microsoft.com/en-us/powershell/scripting/gallery/how-to/publishing-packages/publishing-a-package?view=powershell-7.1#pre-validate-your-item
      inputs:
        filePath: 'tests/prevalidateModules.ps1'
        arguments: '${{ variables.moduleFolderName }}'
        pwsh: true
    - publish: $(System.DefaultWorkingDirectory)/${{ variables.moduleFolderName }}
      artifact: ${{ variables.stageForSigningFolder }}
      displayName: Stage Files for Signing
    - publish: $(System.DefaultWorkingDirectory)
      artifact: ${{ variables.stageForUnsignedFolder }}
      displayName: Stage Unsigned Module
  ## Compliance
  ###########################################################################################
  - job: Check_Compliance
    displayName: Compliance Tasks
    dependsOn: 
    - Build
    condition: succeeded('Build')
    steps:
    - task: ComponentGovernanceComponentDetection@0
      displayName: 'Component Detection'
      inputs:
        sourceScanPath: '$(Build.SourcesDirectory)'
        snapshotForceEnabled: true
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
      displayName: 'Run CredScan'
      inputs:
        toolMajorVersion: V2
        debugMode: false
      continueOnError: false
    - task: PoliCheck@1
      displayName: 'Run PoliCheck'
      inputs:
        targetType: F
        optionsFC: 0
        optionsXS: 0
        optionsPE: '1|2|3|4'
        optionsHMENABLE: 0
      continueOnError: false
    - task: PublishSecurityAnalysisLogs@2
      displayName: 'Publish Security Analysis Logs to Build Artifacts'
      continueOnError: false
    - task: SdtReport@1
      inputs:
        AllTools: false
        APIScan: false
        BinSkim: false
        CodesignValidation: false
        CredScan: true
        FortifySCA: false
        FxCop: false
        ModernCop: false
        MSRD: false
        PoliCheck: true
        PoliCheckBreakOn: 'Severity2Above'
        RoslynAnalyzers: false
        SDLNativeRules: false
        Semmle: false
        TSLint: false
        ToolLogsNotFoundAction: 'Standard'
 